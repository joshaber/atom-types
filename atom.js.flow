type Point = {top: number, left: number, bottom: number, right: number} & {row: number, column: number};

declare module 'atom' {
  declare class Disposable {
    dispose(): void;
  }

  declare class CompositeDisposable extends Disposable {
    add(disposable: Disposable): void;
  }

  declare class Emitter {
    on(name: string, callback: Function): Disposable;
    emit(name: string, context?: ?Object): void;
  }

  declare var _nodegit: $Exports<'nodegit'>;

  declare class GitRepositoryAsync {
    static Git: typeof _nodegit;

    static open(path: string, options?: Object): GitRepositoryAsync;

    getShortHead(): Promise<string>;
  }

  declare class GitRepository {
    async: GitRepositoryAsync;
  }

  declare class TextEditorComponent {
    screenPositionForMouseEvent(e: Event): Point;
  }

  declare class TextEditorElement extends HTMLElement {
    rootElement: HTMLElement;
    component: TextEditorComponent;

    getModel(): TextEditor;
  }

  declare class TextEditor {
    getText(): string;
    setText(text: string): void;

    getPath(): ?string;

    bufferPositionForScreenPosition(p: Point): Point;
  }

  declare class Panel<T> {
    getItem(): T;

    isVisible(): boolean;
    hide(): void;
    show(): void;
  }
}

import type {Disposable, TextEditor, Panel, GitRepository} from 'atom'

declare class Workspace {
  open(uri: string, options?: Object): Promise<void>;
  addOpener<OptionsType, ItemType>(fn: (uri: string, options: OptionsType) => ItemType): Disposable;

  getActiveTextEditor(): TextEditor;

  buildTextEditor(params: Object): TextEditor;

  observeTextEditors(fn: (editor: TextEditor) => void): Disposable;

  addRightPanel<T>(options: {item: T}): Panel<T>;
}

declare class CommandRegistry {
  add(target: string | Element, commandName: string | Object, callback?: Function): Disposable;
}

declare class Config {
  get(key: string): string;
}

declare class DeserializerManager {
  add<StateType, ObjectType>(info: {name: string, deserialize: (state: StateType) => ObjectType}): Disposable;
}

declare class Project {
  relativizePath(p: string): [string, string];
  relativize(p: string): string;
  getPaths(): Array<string>;

  getRepositories(): Array<GitRepository>;
}

declare class ViewRegistry {
  getView(object: Object): HTMLElement;
  addViewProvider<ObjectType, ViewType>(class: Class<ObjectType>, fn: (object: ObjectType) => ViewType): Disposable;
}

declare class TooltipManager {
  add(target: HTMLElement, options: {title: string}): Disposable;
}

declare class Grammar {

}

declare class GrammarRegistry {
  grammarForScopeName(name: string): ?Grammar;
}

declare class AtomEnvironment {
  workspace: Workspace;
  commands: CommandRegistry;
  config: Config;
  deserializers: DeserializerManager;
  views: ViewRegistry;
  project: Project;
  tooltips: TooltipManager;
  grammars: GrammarRegistry;
}

declare var atom: AtomEnvironment;
